{
  "project_id": "Libral_Core_Final_Integration_Protocol_V1",
  "project_goal": "自律運用システムの起動とPCGP（プロフェッショナル・グルーミング・プロトコル）の強制",
  "priority": "AMM_CRAD_INTEGRATION_FIRST",
  "governance_model": "PCGP_4_LAYER_GIT_OPS",
  "execution_steps": [
    {
      "step_id": "S1_STRUCTURE_REDEFINITION",
      "title": "フォルダ構造の再定義と部品再利用基盤の構築",
      "description": "PCGP V1.0と4階層モジュールスタイルに基づき、既存のフォルダ構造を整理し、Component層を確立する。",
      "actions": [
        {
          "action_id": "S1-A1_CREATE_DIRS",
          "action_type": "CREATE_DIRECTORIES",
          "details": "以下のディレクトリを作成する。既存のlibral_core/内を整理する。",
          "paths": [
            "libral-core/src/",
            "libral-core/src/library/components/",
            "libral-core/policies/",
            "libral-core/infra/",
            "libral-core/docs/",
            "libral-core/archive/"
          ]
        },
        {
          "action_id": "S1-A2_RELOCATE_CODE",
          "action_type": "MOVE_FILES",
          "details": "既存のコードと運用実行モジュールを新しいPCGP構造に移動。",
          "source_target_map": {
            "libral-core/main.py": "libral-core/src/main.py",
            "libral-core/libral_core/modules/*": "libral-core/src/modules/",
            "libral-core/ops/*": "libral-core/ops/"
            // NOTE: modules/内のServiceコードは適切なfeatures/*/services/に移動・整理が必要
          }
        },
        {
          "action_id": "S1-A3_IMPLEMENT_COMPONENTS",
          "action_type": "IMPLEMENT_COMPONENT_LAYER",
          "details": "Component層（src/library/components/）を実装。日時処理、暗号化ヘルパー、設定読み込みなどを最小単位で定義し、他の全ての層からの参照を強制する。"
        }
      ]
    },
    {
      "step_id": "S2_POLICIES_INTEGRATION",
      "title": "AMM/CRADの頭脳（ポリシー）の格納と参照実装",
      "description": "AMMとCRADの判断基準となるJSONファイルをpolicies/に格納し、各モジュールに参照ロジックを組み込む。",
      "actions": [
        {
          "action_id": "S2-A1_STORE_AMM_POLICY",
          "action_type": "CREATE_FILE",
          "file_name": "security_policy_amm.json",
          "path": "libral-core/policies/",
          "content": {
            "policy_name": "Autonomous_Moderator_Ruleset_V1",
            "policy_version": "1.0",
            "security_domains": [
              {
                "domain": "KMS_ACCESS",
                "rules": [
                  {
                    "rule_id": "KMS-R-001",
                    "metric": "kms_access_rate_per_second",
                    "threshold": 3,
                    "action": "BLOCK_ACCESS_FOR_30M",
                    "severity": "CRITICAL",
                    "description": "単一PodからのKMSアクセス頻度が3回/秒を超えた場合、30分間ブロックし、アラートを発報する。"
                  },
                  {
                    "rule_id": "KMS-R-002",
                    "metric": "access_outside_business_hours",
                    "condition": "TIME_RANGE_UTC_0_7_AND_22_24",
                    "action": "REQUIRE_2FA_REAUTH",
                    "severity": "HIGH",
                    "description": "UTCの深夜帯（22時～7時）のKMSアクセスに対し、二要素再認証を要求する。"
                  }
                ]
              },
              {
                "domain": "GIT_POLICY",
                "rules": [
                  {
                    "rule_id": "GIT-R-001",
                    "target_action": "kubectl_exec",
                    "block_if_manual_ops_blocked": true,
                    "action": "LOG_AND_BLOCK",
                    "severity": "CRITICAL",
                    "description": "GitOpsが有効な場合、手動でのkubectl操作（exec/delete/apply）をブロックする。"
                  }
                ]
              }
            ]
          }
        },
        {
          "action_id": "S2-A2_STORE_CRAD_RUNBOOK",
          "action_type": "CREATE_FILE",
          "file_name": "recovery_runbook_crad.json",
          "path": "libral-core/policies/",
          "content": {
            "runbook_name": "Context_Aware_Recovery_Runbook_V1",
            "mttr_target_seconds": 180,
            "alert_to_action_map": [
              {
                "alert_name": "HighLatency_P99_BackendAPI",
                "threshold_ms": 150,
                "severity": "MEDIUM",
                "protocol": [
                  {
                    "step_id": 1,
                    "action_type": "K8S_SCALE_OUT",
                    "target_component": "libral-backend-api",
                    "scale_factor": 1
                  },
                  {
                    "step_id": 2,
                    "action_type": "CHAOS_EXPERIMENT_RUN",
                    "experiment_type": "NETWORK_DELAY",
                    "target_component": "libral-backend-api",
                    "duration_seconds": 60,
                    "condition": "IF_LATENCY_PERSISTS_AFTER_STEP_1"
                  }
                ]
              },
              {
                "alert_name": "Postgres_Primary_Down",
                "threshold_seconds": 10,
                "severity": "CRITICAL",
                "protocol": [
                  {
                    "step_id": 1,
                    "action_type": "HA_TRIGGER_FAILOVER",
                    "target_component": "libral-postgres-patroni",
                    "force": true
                  },
                  {
                    "step_id": 2,
                    "action_type": "DRP_PITR_TEST",
                    "target_component": "libral-postgres-cluster",
                    "target_time": "NOW - 5 MINUTES",
                    "condition": "IF_FAILOVER_FAILS"
                  }
                ]
              }
            ]
          }
        },
        {
          "action_id": "S2-A3_IMPLEMENT_MODERATOR",
          "action_type": "CREATE_MODULE",
          "module_name": "AutonomousModerator",
          "details": "AMMモジュールを実装し、S2-A1で格納したファイルを初期化時に読み込み（参照コードを流用）、KMSアクセス制御とGit操作ブロックロジックを統合する。"
        },
        {
          "action_id": "S2-A4_IMPLEMENT_RECOVERY",
          "action_type": "CREATE_MODULE",
          "module_name": "ContextAwareAutoDebugger",
          "details": "CRADモジュールを実装し、S2-A2で格納したファイルを読み込み、Prometheus/Alertmanagerからのアラートを受信した際に、適切なops/*.pyモジュールの関数を呼び出す（実行ファイルと頭脳の統合）。"
        }
      ]
    },
    {
      "step_id": "S3_GOVERNANCE_AUTOMATION",
      "title": "GitOpsとアーカイブの自動化設定",
      "description": "PCGPの自動化ルールをCI/CDとK8S設定に組み込み、運用ブレを排除する。",
      "actions": [
        {
          "action_id": "S3-A1_UPDATE_MASTER_REF",
          "action_type": "CREATE_FILE",
          "file_name": "MASTER_REFERENCE.md",
          "path": "libral-core/docs/",
          "details": "最上位目次ドキュメントを作成。全てのポリシー、APIドキュメント、AMM/CRADのルールへのリンクを一覧化し、コンソールからの参照元とする。"
        },
        {
          "action_id": "S3-A2_ARCHIVE_SCRIPT_SETUP",
          "action_type": "UPDATE_INFRA",
          "details": "CI/CDパイプライン（またはArgo CD設定）に、デプロイ成功時（SYNCED）に以下のアーカイブスクリプトを自動実行するステップを追加する。",
          "script_template": "git archive --format=zip --output=libral-core/archive/$(date +%Y%m%d_%H%M%S)_$(git rev-parse --short HEAD).zip HEAD -- libral-core/src/ libral-core/policies/ libral-core/infra/",
          "trigger": "Argo CD SYNCED status"
        },
        {
          "action_id": "S3-A3_ENFORCE_POLICIES",
          "action_type": "UPDATE_GIT_POLICY",
          "details": "AMMが監視できるよう、全ての操作にユーザー認証情報（アカウント名: admin1, sei5など）の付与を義務付ける。",
          "target_policy": "AMM_002 and GIT_R_001 enforcement"
        }
      ]
    }
  ]
}